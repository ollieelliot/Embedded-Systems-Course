#include "my_library.c"

struct stats dailyStats;

float sumtot = 0;
int length = 0;
float s = 0;
float avg = 0;
float prevAvg = 0;

void init_Stats(void){
  
  dailyStats.min = 100;
  dailyStats.max = -100;
  
}

void recordData(float data){
  if(rec == 1){
    char temp = insertFirst(&list, allocNode(data)); //Returns 0 if no memory, used to check status
    
    dataStats(temp);
    list->timeStamp.minute = get_timestamp().minute;
    list->timeStamp.hour = get_timestamp().hour;
    list->timeStamp.day = get_timestamp().day;
    list->timeStamp.month = get_timestamp().month;
    list->timeStamp.year = get_timestamp().year;
  }
}

void dataStats(char status){
  
  if(time_elapsed.hour == 23 && time_elapsed.minute == 59 && time_elapsed.second == 59){

    /* Calculate stats for that day*/
    
    min(&list);
    max(&list);
    incAvg(&list);
    incVar(&list);
    dailyStats.avg = avg;
    dailyStats.var = sqrt(s/length);
    
    length = 0;
    s = 0;
    avg = 0;
    prevAvg = 0;
    
    printf("Min: %f \n", dailyStats.min);
    printf("Max: %f \n", dailyStats.max);
    printf("Average: %f \n", dailyStats.avg);
    printf("Variance: %f \n", dailyStats.var);
    
    freeMemList(&list);
    printf("New day and freed memory \n");
  }

    
  if(!status){
    /* Calculate current stats*/
    
    min(&list);
    max(&list);
    incAvg(&list);
    incVar(&list);
    
    freeMemList(&list);
    printf("Freed memory \n");
  }

  
  /*Memory is full after approx. 2 hr 48 min */
  
  /* Can't store all data elements in a day in one linked list */
  
}


void min(DLinkedList **first){
  
  DLinkedList *current = *first;
  float min = 100; //Use startvalue as something very big instead of the first value given by the temperature sensor, because it is always 0, maybe needs more delay to get a better value

  while(current != NULL){
    if (current->sensorData < min && current->sensorData > -270){
      min = current->sensorData;
    }
    current = current->next; 
  }
  if (min <= dailyStats.min)
    dailyStats.min = min;
}


void max(DLinkedList **first){
  
  DLinkedList *current = *first;
  float max = -100;

  while(current != NULL){
    if (current->sensorData > max){
      max = current->sensorData;
    }
    current = current->next; 
  }
  
  if (max >= dailyStats.max)
    dailyStats.max = max;
}

/* Incremental average */

void incAvg(DLinkedList **first){
  
  DLinkedList *current = *first;

  while(current != NULL){
    if(current->sensorData > -270){
      length++;
      prevAvg = avg;
      avg += (current->sensorData - avg)/(length);
    }
    current = current->next; 
  }
  
}

/* Incremental variance */

void incVar(DLinkedList **first){
  DLinkedList *current = *first;

  while(current != NULL){
    if(current->sensorData > -270)
      s+= (current->sensorData - prevAvg)*(current->sensorData - avg);
    
    current = current->next; 
  }
  
}




  


